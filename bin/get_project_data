#!/usr/bin/env ruby

# https://developer.github.com/early-access/graphql/explorer/
# https://stackoverflow.com/questions/39666940/how-to-batch-github-graphql-api-queries

require 'graphql/client'
require 'graphql/client/http'

module Kernel
  # File activesupport/lib/active_support/core_ext/kernel/singleton_class.rb, line 3
  def class_eval(*args, &block)
    singleton_class.class_eval(*args, &block)
  end
end

module GitHub
  HTTP = GraphQL::Client::HTTP.new("https://api.github.com/graphql") do
    def headers(context)
      unless token = context[:access_token] || ENV['GITHUB_ACCESS_TOKEN']
        # $ GITHUB_ACCESS_TOKEN=abc123
        #   https://help.github.com/articles/creating-an-access-token-for-command-line-use
        # Get temporary access token from ~/.config/hub
        fail 'Missing GitHub access token. Get temporary access token from ~/.config/hub'
      end

      {
        'Authorization' => "Bearer #{token}"
      }
    end
  end

  fetch_latest_schema = false

  if fetch_latest_schema
    Schema = GraphQL::Client.load_schema(HTTP)
    GraphQL::Client.dump_schema(HTTP, "lib/github/graphql/schema.json")
  else
    Schema = GraphQL::Client.load_schema("lib/github/graphql/schema.json")
  end

  Client = GraphQL::Client.new(schema: Schema, execute: HTTP)
  Query = GitHub::Client.parse <<-'QUERY'
    query {
      query1: repositoryOwner(login: "eliotsykes") {
        repository(name: "rspec-rails-examples") {
        	...RepoFragment
        }
      }
      query2: repositoryOwner(login: "eliotsykes") {
        repository(name: "real-world-rails") {
        	...RepoFragment
        }
      }
    }

    fragment RepoFragment on Repository {
      name
      description
      descriptionHTML
      homepageURL
    }
  QUERY
end

variables = {}
client_context = { access_token: ENV['GITHUB_ACCESS_TOKEN'] }

response = GitHub::Client.query(GitHub::Query, variables: variables, context: client_context)

raise response.errors if response.errors.any?

# require 'pry'
# binding.pry
# p response.data.query1.data
# p response.data.query2.data

response.data.data.each do |query_id, result|
  puts query_id
  result['repository'].each do |field, value|
    puts "#{field}: #{value}"
  end
  puts '-'*80
end
